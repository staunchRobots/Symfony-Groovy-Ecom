<?php

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property decimal $price
 * @property decimal $length
 * @property decimal $width
 * @property enum $quality
 * @property enum $status
 * @property string $pile
 * @property string $floor
 * @property clob $notes
 * @property boolean $is_published
 * @property integer $flickr_id
 * @property boolean $is_on_sale
 * @property Doctrine_Collection $Categories
 * 
 * @method string              getName()         Returns the current record's "name" value
 * @method decimal             getPrice()        Returns the current record's "price" value
 * @method decimal             getLength()       Returns the current record's "length" value
 * @method decimal             getWidth()        Returns the current record's "width" value
 * @method enum                getQuality()      Returns the current record's "quality" value
 * @method enum                getStatus()       Returns the current record's "status" value
 * @method string              getPile()         Returns the current record's "pile" value
 * @method string              getFloor()        Returns the current record's "floor" value
 * @method clob                getNotes()        Returns the current record's "notes" value
 * @method boolean             getIsPublished()  Returns the current record's "is_published" value
 * @method integer             getFlickrId()     Returns the current record's "flickr_id" value
 * @method boolean             getIsOnSale()     Returns the current record's "is_on_sale" value
 * @method Doctrine_Collection getCategories()   Returns the current record's "Categories" collection
 * @method Product             setName()         Sets the current record's "name" value
 * @method Product             setPrice()        Sets the current record's "price" value
 * @method Product             setLength()       Sets the current record's "length" value
 * @method Product             setWidth()        Sets the current record's "width" value
 * @method Product             setQuality()      Sets the current record's "quality" value
 * @method Product             setStatus()       Sets the current record's "status" value
 * @method Product             setPile()         Sets the current record's "pile" value
 * @method Product             setFloor()        Sets the current record's "floor" value
 * @method Product             setNotes()        Sets the current record's "notes" value
 * @method Product             setIsPublished()  Sets the current record's "is_published" value
 * @method Product             setFlickrId()     Sets the current record's "flickr_id" value
 * @method Product             setIsOnSale()     Sets the current record's "is_on_sale" value
 * @method Product             setCategories()   Sets the current record's "Categories" collection
 * 
 * @package    carpetbeggers
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7294 2010-03-02 17:59:20Z jwage $
 */
abstract class BaseProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('price', 'decimal', null, array(
             'type' => 'decimal',
             ));
        $this->hasColumn('length', 'decimal', null, array(
             'type' => 'decimal',
             ));
        $this->hasColumn('width', 'decimal', null, array(
             'type' => 'decimal',
             ));
        $this->hasColumn('quality', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => '3',
              1 => '2',
              2 => '1',
             ),
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'sold',
              1 => 'sale pending',
              2 => 'incomplete',
              3 => 'complete',
             ),
             'default' => 'incomplete',
             ));
        $this->hasColumn('pile', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('floor', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('notes', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('is_published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('flickr_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('is_on_sale', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Category as Categories', array(
             'refClass' => 'ProductCategory',
             'local' => 'product_id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'canUpdate' => true,
             ));
        $jcroppable0 = new Doctrine_Template_JCroppable(array(
             'images' => 
             array(
              0 => 'photo',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($jcroppable0);
    }
}