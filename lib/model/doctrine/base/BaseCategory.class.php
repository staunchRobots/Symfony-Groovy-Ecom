<?php

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property enum $parent
 * @property enum $sort
 * @property Doctrine_Collection $Products
 * 
 * @method string              getName()     Returns the current record's "name" value
 * @method enum                getParent()   Returns the current record's "parent" value
 * @method enum                getSort()     Returns the current record's "sort" value
 * @method Doctrine_Collection getProducts() Returns the current record's "Products" collection
 * @method Category            setName()     Sets the current record's "name" value
 * @method Category            setParent()   Sets the current record's "parent" value
 * @method Category            setSort()     Sets the current record's "sort" value
 * @method Category            setProducts() Sets the current record's "Products" collection
 * 
 * @package    carpetbeggers
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7294 2010-03-02 17:59:20Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('parent', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'rug',
              1 => 'furniture',
             ),
             'default' => '',
             ));
        $this->hasColumn('sort', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'type',
              1 => 'size',
             ),
             'default' => '',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Product as Products', array(
             'refClass' => 'ProductCategory',
             'local' => 'category_id',
             'foreign' => 'product_id'));

        $sortable0 = new Doctrine_Template_Sortable(array(
             'uniqueBy' => 
             array(
              0 => 'parent',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->actAs($sortable0);
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}